import IPGrid

DM=4
P = [(-2, -2, -2, 0), (-2, -2, -1, 0), (-2, -2, -1, 1), (-2, -2, 0, 1), (-2, -2, 0, 2), (-2, -1, -1, 1), (-2, -1, 0, 1),
     (-2, -1, 0, 2), (-2, -1, 1, 1), (-2, -1, 1, 2), (-2, 0, 1, 2), (-2, 0, 2, 2), (-1, -2, -2, -1), (-1, -2, -2, 0),
     (-1, -2, -1, -1), (-1, -2, -1, 0), (-1, -2, -1, 1), (-1, -1, -2, -1), (-1, -1, -1, -1), (-1, -1, -1, 0),
     (-1, -1, -1, 1), (-1, -1, 0, 0), (-1, -1, 0, 1), (-1, -1, 1, 1), (-1, -1, 1, 2), (-1, 0, 0, 0), (-1, 0, 0, 1),
     (-1, 0, 1, 1), (-1, 0, 1, 2), (-1, 0, 2, 2), (-1, 1, 1, 1), (-1, 1, 1, 2), (-1, 1, 2, 1), (-1, 1, 2, 2),
     (0, -2, -2, -2), (0, -2, -2, -1), (0, -1, -2, -2), (0, -1, -2, -1), (0, -1, -1, -1), (0, -1, -1, 0), (0, -1, 0, 0),
     (0, 0, -1, -1), (0, 0, -1, 0), (0, 0, 0, -1), (0, 0, 0, 0), (0, 0, 0, 1), (0, 0, 1, 0), (0, 0, 1, 1), (0, 1, 0, 0),
     (0, 1, 1, 0), (0, 1, 1, 1), (0, 1, 2, 1), (0, 1, 2, 2), (0, 2, 2, 1), (0, 2, 2, 2), (1, -1, -2, -2),
     (1, -1, -2, -1), (1, -1, -1, -2), (1, -1, -1, -1), (1, 0, -2, -2), (1, 0, -1, -2), (1, 0, -1, -1), (1, 0, 0, -1),
     (1, 0, 0, 0), (1, 1, -1, -2), (1, 1, -1, -1), (1, 1, 0, -1), (1, 1, 0, 0), (1, 1, 1, -1), (1, 1, 1, 0),
     (1, 1, 1, 1), (1, 1, 2, 1), (1, 2, 1, -1), (1, 2, 1, 0), (1, 2, 1, 1), (1, 2, 2, 0), (1, 2, 2, 1), (2, 0, -2, -2),
     (2, 0, -1, -2), (2, 1, -1, -2), (2, 1, -1, -1), (2, 1, 0, -2), (2, 1, 0, -1), (2, 1, 1, -1), (2, 2, 0, -2),
     (2, 2, 0, -1), (2, 2, 1, -1), (2, 2, 1, 0), (2, 2, 2, 0)]
assert ( 89 == len(P))  # en=5
'''P = [(-3, -3, -2, 0), (-3, -3, -2, 1), (-3, -3, -1, 1), (-3, -3, -1, 2), (-3, -3, 0, 2), (-3, -2, -1, 1),
      (-3, -2, -1, 2), (-3, -2, 0, 1), (-3, -2, 0, 2), (-3, -2, 0, 3), (-3, -2, 1, 2), (-3, -2, 1, 3), (-3, -1, 0, 2),
      (-3, -1, 1, 2), (-3, -1, 1, 3), (-3, -1, 2, 3), (-3, 0, 2, 3), (-2, -3, -3, -1), (-2, -3, -3, 0),
      (-2, -3, -2, -1), (-2, -3, -2, 0), (-2, -3, -2, 1), (-2, -3, -1, 0), (-2, -3, -1, 1), (-2, -2, -2, 0),
      (-2, -2, -1, 0), (-2, -2, -1, 1), (-2, -2, 0, 1), (-2, -2, 0, 2), (-2, -1, -1, 1), (-2, -1, 0, 1), (-2, -1, 0, 2),
      (-2, -1, 1, 1), (-2, -1, 1, 2), (-2, -1, 1, 3), (-2, -1, 2, 3), (-2, 0, 1, 2), (-2, 0, 1, 3), (-2, 0, 2, 2),
      (-2, 0, 2, 3), (-2, 0, 3, 3), (-2, 1, 2, 3), (-2, 1, 3, 3), (-1, -3, -3, -2), (-1, -3, -3, -1), (-1, -3, -2, -1),
      (-1, -3, -2, 0), (-1, -2, -3, -2), (-1, -2, -3, -1), (-1, -2, -2, -1), (-1, -2, -2, 0), (-1, -2, -1, -1),
      (-1, -2, -1, 0), (-1, -2, -1, 1), (-1, -1, -2, -1), (-1, -1, -1, -1), (-1, -1, -1, 0), (-1, -1, -1, 1),
      (-1, -1, 0, 0), (-1, -1, 0, 1), (-1, -1, 1, 1), (-1, -1, 1, 2), (-1, 0, 0, 0), (-1, 0, 0, 1), (-1, 0, 1, 1),
      (-1, 0, 1, 2), (-1, 0, 2, 2), (-1, 0, 2, 3), (-1, 1, 1, 1), (-1, 1, 1, 2), (-1, 1, 2, 1), (-1, 1, 2, 2),
      (-1, 1, 2, 3), (-1, 1, 3, 2), (-1, 1, 3, 3), (-1, 2, 3, 2), (-1, 2, 3, 3), (0, -3, -3, -2), (0, -2, -3, -3),
      (0, -2, -3, -2), (0, -2, -3, -1), (0, -2, -2, -2), (0, -2, -2, -1), (0, -1, -3, -2), (0, -1, -2, -2),
      (0, -1, -2, -1), (0, -1, -1, -1), (0, -1, -1, 0), (0, -1, 0, 0), (0, 0, -1, -1), (0, 0, -1, 0), (0, 0, 0, -1),
      (0, 0, 0, 0), (0, 0, 0, 1), (0, 0, 1, 0), (0, 0, 1, 1), (0, 1, 0, 0), (0, 1, 1, 0), (0, 1, 1, 1), (0, 1, 2, 1),
      (0, 1, 2, 2), (0, 1, 3, 2), (0, 2, 2, 1), (0, 2, 2, 2), (0, 2, 3, 1), (0, 2, 3, 2), (0, 2, 3, 3), (0, 3, 3, 2),
      (1, -2, -3, -3), (1, -2, -3, -2), (1, -1, -3, -3), (1, -1, -3, -2), (1, -1, -2, -3), (1, -1, -2, -2),
      (1, -1, -2, -1), (1, -1, -1, -2), (1, -1, -1, -1), (1, 0, -2, -3), (1, 0, -2, -2), (1, 0, -1, -2), (1, 0, -1, -1),
      (1, 0, 0, -1), (1, 0, 0, 0), (1, 1, -1, -2), (1, 1, -1, -1), (1, 1, 0, -1), (1, 1, 0, 0), (1, 1, 1, -1),
      (1, 1, 1, 0), (1, 1, 1, 1), (1, 1, 2, 1), (1, 2, 1, -1), (1, 2, 1, 0), (1, 2, 1, 1), (1, 2, 2, 0), (1, 2, 2, 1),
      (1, 2, 3, 1), (1, 2, 3, 2), (1, 3, 2, 0), (1, 3, 2, 1), (1, 3, 3, 1), (1, 3, 3, 2), (2, -1, -3, -3),
      (2, -1, -2, -3), (2, 0, -3, -3), (2, 0, -2, -3), (2, 0, -2, -2), (2, 0, -1, -3), (2, 0, -1, -2), (2, 1, -2, -3),
      (2, 1, -1, -3), (2, 1, -1, -2), (2, 1, -1, -1), (2, 1, 0, -2), (2, 1, 0, -1), (2, 1, 1, -1), (2, 2, 0, -2),
      (2, 2, 0, -1), (2, 2, 1, -1), (2, 2, 1, 0), (2, 2, 2, 0), (2, 3, 1, -1), (2, 3, 1, 0), (2, 3, 2, -1),
      (2, 3, 2, 0), (2, 3, 2, 1), (2, 3, 3, 0), (2, 3, 3, 1), (3, 0, -2, -3), (3, 1, -2, -3), (3, 1, -1, -3),
      (3, 1, -1, -2), (3, 1, 0, -2), (3, 2, -1, -3), (3, 2, -1, -2), (3, 2, 0, -3), (3, 2, 0, -2), (3, 2, 0, -1),
      (3, 2, 1, -2), (3, 2, 1, -1), (3, 3, 0, -2), (3, 3, 1, -2), (3, 3, 1, -1), (3, 3, 2, -1), (3, 3, 2, 0)]
assert ( 185 == len(P))  # en=7 '''
# ************************************************************************************
K = 4+12
templates = []
templates.append([(-1, 0, 0, 0), (0, 0, 0, 0), (1, 0, 0, 0)])
templates.append([(0, -1, 0, 0), (0, 0, 0, 0), (0, 1, 0, 0)])
templates.append([(0, 0, -1, 0), (0, 0, 0, 0), (0, 0, 1, 0)])
templates.append([(0, 0, 0, -1), (0, 0, 0, 0), (0, 0, 0, 1)])
for i in range(4):
    for j in range(3):
        templates.append([templates[i][0], (0, 0, 0, 0), templates[(i + j+1) % 4][2]])
assert (K == len(templates))
rangeType = [[1, 30] for k in range(K)]

IPGrid.optimize(P, None, templates, rangeType)
# the same results by Java: testPack/PackAmmBeen.java